import { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import useInputState from "src/hooks/useInputState";

import styles from "./styles.module.scss";

const EditChallenge = () => {
  const { state } = useLocation();
  const [inputs, setState, onChange] = useInputState();

  // make component dropmulticheck
  const [selected, setSelected] = useState([]);
  const onCheck = (e, i) => {
    const prev = [...selected];
    if (e.target.checked) {
      prev.push({ name: e.target.name, index: i });
      setSelected(prev.sort((a, b) => a.index - b.index));
    } else {
      setSelected(prev.filter((v) => e.target.name !== v.name));
    }
  };

  const [challenges, setChallenges] = useState([]);
  const addChallenge = () => {
    const temp = [...challenges];
    temp.push({ ...inputs, tactics: selected });
    setState({ title: "", desc: "" });
    setSelected([]);
    setChallenges(temp);
  };

  const navigate = useNavigate();
  const finishEdit = async (url) => {
    const res = await fetch(url, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ scenario: state, challenges: challenges }),
    });
    if (res.ok) {
      navigate("/admin");
    }
    navigate("/admin");
  };
  //   type AutoGenerated struct {
  //     Title     string `json:"title"`
  //     Desc      string `json:"desc"`
  //     Os        string `json:"os"`
  //     VMOptions []struct {
  //        Name    string `json:"name"`
  //        Command string `json:"command"`
  //     } `json:"vm-options"`
  //     Data []struct {
  //        Tactic   string   `json:"tactic"`
  //        Payloads []string `json:"payloads"`
  //     } `json:"data"`
  //  }

  return (
    <div className={`${styles.editchallenge}`}>
      <p className="title">Edit Challenge</p>
      <div className="box">
        <p className="small-title">Challenge Info</p>
        <div className={styles.smallinputs}>
          <input
            className={`${styles["chall-input"]}`}
            name="title"
            onChange={onChange}
            value={inputs.title}
            placeholder="title"
          />
          <input
            className={`${styles["chall-input"]}`}
            name="score"
            onChange={onChange}
            value={inputs.score}
            placeholder="score"
          />
        </div>
        <textarea
          name="description"
          rows="5"
          className={`${styles["chall-input"]}`}
          placeholder="description"
        ></textarea>
        <p className="small-title">Select Tactics</p>
        <div className={styles.tactics}>
          {state.map((d, i) => (
            <div className={styles.tacticitem}>
              <div className={styles.tacticinfo}>
                <div className={styles.order}>{i}</div>
                <p>{d.title}</p>
              </div>
              {d.payloads.map((p) => (
                <div className={styles.payload}>{p.payload}</div>
              ))}
            </div>
          ))}
        </div>
        <button className={styles.pbutton} onClick={addChallenge}>
          Add Challenge
        </button>
      </div>
      <div className="box">
        <p className="small-title">Challenges</p>
        {challenges.length === 0
          ? "no challenges created"
          : challenges.map((d, i) => (
              <div className="created">
                <p className="text ">
                  {i}:{d.title}
                </p>
                <p className="text">desc:{}</p>
                <p className="text">tactics:</p>
                {d.tactics.map((e) => (
                  <p className="text">{e.name}</p>
                ))}
              </div>
            ))}
      </div>
      <button className={styles.pbutton} onClick={finishEdit}>
        FINISH
      </button>
    </div>
  );
};

export default EditChallenge;
