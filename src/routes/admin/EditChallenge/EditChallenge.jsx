import { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import useInputState from "src/hooks/useInputState";

import "./styles.scss";

const EditChallenge = () => {
  const { state } = useLocation();
  const [inputs, setState, onChange] = useInputState();

  // make component dropmulticheck
  const [selected, setSelected] = useState([]);
  const onCheck = (e, i) => {
    const prev = [...selected];
    if (e.target.checked) {
      prev.push({ name: e.target.name, index: i });
      setSelected(prev.sort((a, b) => a.index - b.index));
    } else {
      setSelected(prev.filter((v) => e.target.name !== v.name));
    }
  };

  const [challenges, setChallenges] = useState([]);
  const addChallenge = () => {
    const temp = [...challenges];
    temp.push({ ...inputs, tactics: selected });
    setState({ title: "", desc: "" });
    setSelected([]);
    setChallenges(temp);
  };

  const navigate = useNavigate();
  const finishEdit = async (url) => {
    const res = await fetch(url, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ scenario: state, challenges: challenges }),
    });
    if (res.ok) {
      navigate("/admin");
    }
    navigate("/admin");
  };
  //   type AutoGenerated struct {
  //     Title     string `json:"title"`
  //     Desc      string `json:"desc"`
  //     Os        string `json:"os"`
  //     VMOptions []struct {
  //        Name    string `json:"name"`
  //        Command string `json:"command"`
  //     } `json:"vm-options"`
  //     Data []struct {
  //        Tactic   string   `json:"tactic"`
  //        Payloads []string `json:"payloads"`
  //     } `json:"data"`
  //  }

  return (
    <div className="editchallenge">
      <p className="title">edit challenge</p>
      <div className="box">
        <p className="text">create challenge</p>
        <input
          name="title"
          onChange={onChange}
          value={inputs.title}
          placeholder="title"
        />
        <input
          name="desc"
          onChange={onChange}
          value={inputs.desc}
          placeholder="description"
        />
        <p className="text">tactics</p>
        {state.map((d, i) => (
          <div className="tactic-item">
            <label>
              <input
                type="checkbox"
                name={d.tactic}
                onChange={(e) => onCheck(e, i)}
                checked={selected.find((e) => e.name === d.tactic)}
              />
              {d.tactic}
            </label>
            {d.list.map((d) => (
              <div>{d}</div>
            ))}
          </div>
        ))}
        <button onClick={addChallenge}>add challenge</button>
      </div>
      <div className="box">
        <p className="text">challenges</p>
        {challenges.length !== 0
          ? challenges.map((d, i) => (
              <div className="created">
                <p className="text ">
                  {i}:{d.title}
                </p>
                <p className="text">desc:{d.desc}</p>
                <p className="text">tactics:</p>
                {d.tactics.map((e) => (
                  <p className="text">{e.name}</p>
                ))}
              </div>
            ))
          : "no challenges created"}
      </div>
      <button onClick={finishEdit}>finish</button>
    </div>
  );
};

export default EditChallenge;
